const { QRCodeStyling } = require('@ckho/qr-code-styling/lib/qr-code-styling.common');
const nodeCanvas = require('canvas');
const { JSDOM } = require('jsdom');

module.exports = {
  friendlyName: 'Generador QR',
  description: 'Genera un c√≥digo QR estilizado en formato PNG o SVG',

  inputs: {
    shortUrl: { type: 'string', required: true },
    style: { type: 'number', required: true },
    size: { type: 'number', required: true },
    type: { type: 'string', isIn: ['png', 'svg'], required: true }
  },

  exits: {
    success: { description: 'QR generado correctamente.' },
    error: { description: 'Error al generar el QR.' }
  },

  fn: async function ({ shortUrl, style, size, type }, exits) {
    sails.log.info('üé® Generando QR con estilo', style, 'y tipo', type);

    try {
      // 1) Obtener estilos y logos desde el helper
      const { estilos, logo } = await sails.helpers.style.loadstyles();

      if (!estilos || !logo) {
        throw new Error("No se encontraron los estilos o los logos en el helper.");
      }

      if (!estilos[style]) {
        throw new Error("Estilo seleccionado no v√°lido.");
      }

      if (!logo[type]) {
        throw new Error("Tipo de imagen no v√°lido. Usa 'png' o 'svg'.");
      }

      // 2) Configurar opciones del QR
      const opcionesQR = {
        ...estilos[style],
        data: shortUrl,
        width: size,
        height: size,
        image: logo[type]
      };

      // Crear el QR
      const qrCode = new QRCodeStyling({
        jsdom: JSDOM,
        nodeCanvas: type === 'png' ? nodeCanvas : undefined,
        type: type === 'svg' ? 'svg' : undefined,
        ...opcionesQR
      });

      const result = await qrCode.getRawData(type);

      return exits.success({
        contentType: type === 'svg' ? 'image/svg+xml' : 'image/png',
        data: result,
        format: type
      });

    } catch (err) {
      sails.log.error('‚ö†Ô∏è Error generando QR en helper qr/generadorqr:', err);
      return exits.error(err);
    }
  }
};
