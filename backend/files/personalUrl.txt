

 // server.js
 const express = require("express");
 const cors = require("cors");
 const { QRCodeStyling } = require("qr-code-styling/lib/qr-code-styling.common");
 const nodeCanvas = require("canvas");
 const { JSDOM } = require("jsdom");
 const fs = require("fs");
 const path = require("path");
 
 
 
 const app = express();
 const PORT = 4021;
 
 
 
 app.use(cors({
     origin: "*",
     methods: "GET, POST, OPTIONS",
     allowedHeaders: "Content-Type"
 }));
 
app.use(express.static(path.join(__dirname, "frontend")));
 app.use(express.json());
 app.use("/img", express.static(path.join(__dirname, "img")));
 
 
 
 
 // Leer el logo en Base64
 let logoBase64;
 try {
     const logoPath = path.join(__dirname,"img","hostdimelogo.png");
     logoBase64 = fs.readFileSync(logoPath, { encoding: "base64" });
 } catch (error) {
     console.error("Error: No se pudo leer el archivo del logo.", error);
 }
 
 
 // Mapeo de formatos de imagen permitidos
 const Wtype = {
     png: `data:image/png;base64,${logoBase64}`,
     svg: `data:image/svg+xml;base64,${logoBase64}`
 };
 
 // Estilos preconfigurados
 const estilosQR = {
     morado: {
         width: "",
         height: "",
         data: "",
         margin: 0,
         qrOptions: { typeNumber: "0", mode: "Byte", errorCorrectionLevel: "Q" },
         imageOptions: { hideBackgroundDots: true, imageSize: 0.4, margin: 13 },
         dotsOptions: { type: "square", color: "#000000" },
         backgroundOptions: { color: "rgba(255, 255, 255, 0)" },
         image: `data:image/png;base64,${logoBase64}`,
         cornersSquareOptions: { type: "square", color: "#c40d81" },
         cornersDotOptions: { type: "dot", color: "#c40d81" }
     },
     dots: {
        width: "",
        height: "",
        data: "",
        margin: 0,
        qrOptions: { typeNumber: "0", mode: "Byte", errorCorrectionLevel: "H" },
        imageOptions: { hideBackgroundDots: true, imageSize: 0.32, margin: 2 },
        dotsOptions: { type: "dots", color: "#000000",gradient:null },
        backgroundOptions: { color: "rgba(255, 255, 255, 0)" },
        image: `data:image/png;base64,${logoBase64}`,
        cornersSquareOptions: { type:  "extra-rounded", color: "#f46f10" },
        cornersDotOptions: { type: "dot", color: "#f46f10" }
    },
     square: {
         width: "",
         height: "",
         data: "",
         image: `data:image/png;base64,${logoBase64}`,
         dotsOptions: { color: "#000000", type: "square" },
         backgroundOptions: { color: "#ffffff" },
         imageOptions: { crossOrigin: "anonymous", margin: 20 }
     },
     hostdime: {
         width: "",
         height: "",
         data: "",
         margin: 0,
         qrOptions: { typeNumber: "0", mode: "Byte", errorCorrectionLevel: "Q" },
         imageOptions: { hideBackgroundDots: true, imageSize: 0.4, margin: 13 },
         dotsOptions: { type: "dots", color: "#f46f10"},
         backgroundOptions: { color: "rgb(255, 255, 254)" },
         image: `data:image/png;base64,${logoBase64}`,
         cornersSquareOptions: { type: "dot", color: "#f46f10" },
         cornersDotOptions: { type: "dot", color: "rgba(48, 119, 200, 0.71)"  }
     }
 };

 app.post("/generar-qr", async (req, res) => {
    const { url, style, size, type, personalUrl } = req.body;

    // Validación básica de los parámetros
    if (!url || !style || !estilosQR[style] || !Wtype[type]) {
        return res.status(400).json({ error: "Parámetros inválidos." });
    }

    try {
        // Validación del alias personalizado
        let customSlug;
        if (personalUrl && personalUrl.trim() !== "") {
            const slugRegex = /^[a-zA-Z0-9-_]+$/; // Solo letras, números, guiones y guiones bajos
            if (!slugRegex.test(personalUrl.trim())) {
                return res.status(400).json({
                    error: "Alias personalizado no válido. Usa solo letras, números, '-' o '_'."
                });
            }
            customSlug = personalUrl.trim(); // Guarda el alias validado
        }

        // Construir el cuerpo de la petición
        const bodyData = { longUrl: url };
        if (customSlug) {
            bodyData.customSlug = customSlug;
        }

        console.log("🔹 Cuerpo enviado a la API:", JSON.stringify(bodyData));

        // Hacer la petición a la API
        const shortenResponse = await fetch("https://qrlink.hostdi.me/rest/v3/short-urls", {
            method: "POST",
            headers: {
                "X-Api-Key": "7c24e07c7d1a-49a9-6465-937e-05e1f965",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(bodyData)
        });

        const shortenData = await shortenResponse.json();
        console.log("🔹 Respuesta completa de la API:", shortenData);

        if (!shortenResponse.ok) {
            throw new Error(shortenData.detail || "Error desconocido al acortar la URL");
        }

        const shortUrl = shortenData.shortUrl;

        // Configurar opciones para el QR
        const opcionesQR = {
            ...estilosQR[style],
            data: shortUrl,
            width: parseInt(size),
            height: parseInt(size),
            image: Wtype[type]
        };

        // Generar el código QR
        const qrCode = new QRCodeStyling({ nodeCanvas, jsdom: JSDOM, ...opcionesQR });
        const buffer = await qrCode.getRawData(type);

        // Respuesta final
        res.json({
            shortUrl,
            qrImage: `data:image/${type};base64,${buffer.toString("base64")}`
        });

    } catch (error) {
        console.error("⚠️ Error al procesar la solicitud:", error.message);
        res.status(500).json({ error: error.message || "Error al generar el código QR." });
    }
});

// Iniciar el servidor
app.listen(PORT, () => {
    console.log(`Servidor corriendo en http://localhost:${PORT}`);
});




---------------------------------------------------------------------------------------------------


<!DOCTYPE html> 
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generador de QR con Vue 3</title>
    <!-- Bootstrap 5 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Vue 3 CDN -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
</head>

<body class="bg-light"> <!--mi todo en blanco--->
    <div id="app" class="container mt-5"><!--sera el contenedor que activare con vue--->

        <div class="row justify-content-center"><!--cree otro container para poder centrar --->
            <div class="col-md-6 bg-white p-4 shadow rounded"><!---centre al medio de la pantalla-->
                <h1 class="text-center mb-4">Generador de Código QR</h1><!--titulo--->
    
             <!-- Input de URL -->
<div class="mb-3">
    <label for="urlInput" class="form-label">Ingresa la URL</label>
    <input 
        type="text" 
        id="urlInput" 
        name="url" 
        v-model="url" 
        class="form-control" 
        placeholder="https://example.com" 
        required
    >
</div>

<!-- Input de URL Personalizada -->
<div class="mb-3">
    <label for="personalUrl" class="form-label">URL personalizada (opcional)</label>
    <input 
        type="text" 
        id="personalUrl" 
        name="personalUrl" 
        v-model="personalUrl" 
        class="form-control" 
        placeholder="Ejemplo: mi-enlace"
    >
</div>

<!-- Selección de Estilo -->
<div class="mb-3">
    <label class="form-label d-block">Selecciona el Estilo</label>
    <div class="d-flex justify-content-around flex-wrap">
        <div 
            v-for="style in styles" 
            :key="style.value" 
            class="text-center"
        >
            <input 
                type="radio" 
                v-model="selectedStyle" 
                :value="style.value" 
                class="btn-check" 
                :id="`style-${style.value}`"
            >
            <label :for="`style-${style.value}`" class="btn btn-outline-primary">
                <img :src="style.img" :alt="style.value" class="img-thumbnail" width="80">
                <div>{{ style.name }}</div>
            </label>
        </div>
    </div>
</div>

    
                <!-- Selección de Tamaño -->
                <div class="mb-3">
                    <label class="form-label">Tamaño</label><!--describe mi select--->
                    <select v-model="size" class="form-select"><!--va a coger el value dentro de este select y lo guargara en size para llevarlo al array--->
                        <option value="300">300</option>
                        <option value="500">500</option>
                        <option value="1200">1200</option>
                    </select>
                </div>
    
                <!-- Selección de Formato -->
                <div class="mb-3">
                    <label class="form-label">Formato</label>
                    <select v-model="type" class="form-select"><!--va a tomar el value dentro de este select y lo guargara en type para llevarlo al array--->
                        <option value="svg">SVG</option>
                        <option value="png">PNG</option>
                    </select>
                </div>
    
                <!-- Botón único para shortQr y Crear el url  -->
                <div class="d-grid gap-2">
                    <button class="btn btn-success" @click="generarQR">Generar QR</button><!--escucha el click y trae generarQr que es la funcion del script, o mas bien la activa--->
                </div>
    
                <!-- URL corta generada -->
                <p v-if="shortUrl" class="mt-3 text-center text-primary fw-bold">{{ shortUrl }}</p><!--solo me condiciona que SI shortUrl ya existe me la ponga en {{ shortUrl }}--->
              
              
                <!-- Botón de descarga -->
                <div v-if="qrImage" class="text-center mt-3">
                    <a :href="qrImage" :download="`Hay-tienes-tu-qr-HOSTDIME.${type}`" class="btn btn-info">Descargar QR</a>
                </div>


                
    
               
            </div>

            <!-- Imagen del QR -->
            <div v-if="qrImage" class="text-center mt-3">
                <!-- Para PNG -->
                <img v-if="type === 'png'" :src="qrImage" alt="Código QR" class="img-fluid" /><!--si es estrictamente png traerlo con :src y mostrar--->

                <!-- Para SVG -->
                <div v-if="type === 'svg'" class="text-center mt-3" v-html="decodeSvg(qrImage)"></div><!--convertir a html para mostrar svg--->
            </div> 
            
        </div>
    </div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                styles: [
                    { name: 'Hostdime', value: 'hostdime', img: 'img/hostdime.png' },
                    { name: 'Morado', value: 'morado', img: 'img/morado.png' },
                    { name: 'Puntos', value: 'dots', img: 'img/dots.png' },
                    { name: 'Cuadrados', value: 'square', img: 'img/square.png' }
                ],
                url: '',
                personalUrl: '',
                selectedStyle: 'hostdime',
                size: '300',
                type: 'svg',
                shortUrl: '',
                qrImage: ''
            };
        },

        methods: {
            async generarQR() {
                if (!this.url) return alert("Por favor, ingresa una URL válida.");

                try {
                    const response = await fetch("http://localhost:4021/generar-qr", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            url: this.url,
                            personalUrl: this.personalUrl,
                            style: this.selectedStyle,
                            size: parseInt(this.size),
                            type: this.type
                        })
                    });

                    const data = await response.json();
                    if (data.error) throw new Error(data.error);

                    this.shortUrl = data.shortUrl;
                    this.qrImage = data.qrImage;

                } catch (error) {
                    console.error("Error:", error);
                    alert("No se pudo generar el QR.");
                }
            },

            decodeSvg(base64Svg) {
                try {
                    return atob(base64Svg.split(",")[1]);
                } catch {
                    return "<p>Error al cargar el QR en formato SVG</p>";
                }
            }
        }
    });

    app.mount('#app');
</script>

</body>
</html>
